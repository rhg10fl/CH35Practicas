package org.generation.umbrellaUser.service;

import java.util.List;

import org.generation.umbrellaUser.exceptions.UserNotFoundException;
import org.generation.umbrellaUser.model.User;
import org.generation.umbrellaUser.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


@Service
public class UserService {
	//Eliminamos todo lo relacionado al ArrayList que creamos para instanciar objetos.
	//Ahora vamos a traer a JPA para que me brinde los métodos para recuperar los datos. (instanciar)
	private final UserRepository repository;
	
	//Constructor permite la inyección de dependencias
	@Autowired
	public UserService(UserRepository repository) {
		this.repository =  repository;
	}
	
	//Crear método de tipo Get para traer a todos los usuarios 
	public List<User> allUsers() {
		return repository.findAll();
	}
	
	//Crear método de tipo get para traer un usuario por id, si no encuentra al usuario arroja una exception (default o personalizada)
			public User getOne(Long id) {
				return repository.findById(id)
						.orElseThrow(() -> new UserNotFoundException(id)); //Estoy creando una exception personalizada que vivirá en otra clase con el mismo nombre de la exception
	}
	
			//Crear método para eliminar un usuario por id. Primero debemos comprobar que el usuario con el id realmente existe, en caso de existir se elimina, si no, se lanza una Exception por default (IllegalStateException) o personalizada
			public void deleteUser(Long id) {
				if (repository.existsById(id)) {
					repository.deleteById(id); //para poder eliminar debe no retornar info ni nada por eso es void
				}
				else {
					//throw new IllegalStateException("El cliente con el id " + id + " no existe");
					throw new UserNotFoundException(id);
				}
			}
	
}//class
