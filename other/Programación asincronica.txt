//Programación sincrónica
/*
function two () {
    console.log("dos");
}

function one () {
    console.log("uno");
    two();
    console.log("tres");
}

one();

console.log("******************");
*/
//Prohramación asincrona
//setTimeout que recibe una función anónima y establece un tiempo de ejecución para cumplir con la condición de asincronismo. 
/*
const twoAsync = () => {
    setTimeout(() => {
    console.log("dos Sync");
    }, 5000);
}

const oneAsync = () => {
    setTimeout(function() {
    console.log("uno Async");
    }, 2000);
    twoAsync();
    console.log("tres Async");
}

oneAsync(); */

/*
*Trabajando con promesas mediante la Fetch API
*/
const url = "https://jsonplaceholder.typicode.com/users";

fetch(url)
//Si se cumple la promesa, vamos a traer los datos de la API y se convertirá en tipo json para poder mostrarlos en consola.
    .then(response => response.json())
    .then(response => {
        console.log(response); //Mostrando en consola todos los usuarios de la API
        console.log(response[0].name); //Mostrando en consola el usuario con el indice 0 y trayendo solamente su nombre
})
.catch(error => console.error("!Ups, algo salió mal", error)); //Mensaje de error

// >- Usando fetch para mostrar en navegador
const botonInfo = document.querySelector("btn-mensaje");
const info = document.querySelector("#mensaje");
//Variable para guardar la información que se ba a traer desde la API: debe ser de tipo NULL
let post = null;

//Consumiendo API con fetch (promesas)
botonInfo.addEventListener("click", () => {
    fetch("https://jsonplaceholder.typicode.com/users/6")
    .then (response => response.json())
    .then(response => {
        post = response; //Guardo los datos de response  en la varianle de tipo null, para modificar el dato
        //Manadamos a llamar la varianbles desde la función  (perrom, esa no la hemos hecho, hay que hacerla)
        mostrarDatos(post);
    })
    .catch(error => console.error("!Problemas¡", error))

})

//Función pque me permita manipular la variables de tipo null
const mostrarDatos = (post) => {
    //crear nodos
    const name = document.createElement("h2");
    const userName = document.createElement("h3");
    const email = document.createElement("p");
    const phone = document.createElement("p");

    //Ponerle en el HTML (innerHTML)
    name.innerHTML= post.name;
    userName.innerHTML = post.username;
    email.innerHTML = post.email;
    phone.innerHTML = post.phone;

    //Hacer que aparezcan en el navegador
    info.appendChild(name);
    info.appendChild(userName);
    info.appendChild(email);
    info.appendChild(phone);
}
    


